 package GUI;

import Domaine.BesoinsTransport.ElementBesoins;
import Domaine.BesoinsTransport.Itineraire;
import Domaine.Simulatheure;
import Domaine.Simulatheure.Mode;
import Domaine.Simulatheure.Commande;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import Domaine.Utilitaire.*;
import Domaine.ReseauRoutier.*;
import Domaine.ReseauTransport.*;
import Domaine.Statistiques.StatistiqueBesoin;
import Domaine.Statistiques.StatistiquesGeneral;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.LinkedList;
import javax.swing.JFrame;
import java.util.*;
import javax.swing.JOptionPane;
/**
 *
 * @author Vinny
 */
public class MainWindow extends javax.swing.JFrame {
    
    public Simulatheure m_controleur;
    //public Simulatheure m_controleurSimulation;
    //public Simulatheure m_contoleurReseau;
    
    public Mode m_mode_courant;
    public Commande m_commande_courante;
    
    private Timer m_timer;
    private Chronometre m_crono;
    private MainWindow m_this = this; //l33t
    public double m_tempsDebutSimulation;
    public double m_tempsFinSimulation;
    private boolean m_simulationEstLancer = false;
    private LinkedList<StatistiquesGeneral> m_statistiques = new LinkedList<>();
    private LinkedList<Integer> m_idSimuli = new LinkedList<>();
    private volatile int screenX = 0;
    private volatile int screenY = 0;
    private volatile int myX = 0;
    private volatile int myY = 0;
    

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        changeLookAndFeel();
        m_controleur = new Simulatheure();
        initComponents();
        routier.doClick();
        initialiserPanels();
        this.afficheurReseau.setDimension(false);
    }

    class MyTimerActionListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            double tmp = m_crono.getTempsDebut();
            boolean finSimulation = false;
            double deltatT = m_crono.getDeltatT();
            if ((m_tempsFinSimulation - m_tempsDebutSimulation) <= m_crono.getTempsDebut()*1000) {
                deltatT = ((m_tempsFinSimulation - m_tempsDebutSimulation) - tmp*1000)/1000;
                finSimulation = true;
                Date itemDate = new Date((long)(m_tempsDebutSimulation + (tmp + deltatT)*1000));
                String itemDateStr = new SimpleDateFormat("HH:mm:ss").format(itemDate);
                 time.setText(itemDateStr);
            }
            else{
                Date itemDate = new Date((long)(m_tempsDebutSimulation + m_crono.getTempsDebut()*1000));
                String itemDateStr = new SimpleDateFormat("HH:mm:ss").format(itemDate);
                 time.setText(itemDateStr);
            }
            m_controleur.rafraichirSimulation(new Temps(deltatT));
            facteurMultiplicatif.setText("X" + m_crono.getFacteurVitesse());
            if (deltatT != 0) {
                miseAjoutAutobusComboBox();
            }
            m_this.afficheurReseau.repaint();
            if (finSimulation) {
                playPauseSimulation.setText("Lancer!");
                arreterSimulation.doClick();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupeModes = new javax.swing.ButtonGroup();
        groupeRoutier = new javax.swing.ButtonGroup();
        groupeTransport = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        editerClicDroit = new javax.swing.JMenuItem();
        supprimerClicDroit = new javax.swing.JMenuItem();
        mainPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        panneauModes = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        boutonModes = new javax.swing.JPanel();
        routier = new javax.swing.JToggleButton();
        transport = new javax.swing.JToggleButton();
        besoins = new javax.swing.JToggleButton();
        simulation = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        annuler = new javax.swing.JButton();
        retablir = new javax.swing.JButton();
        zoomTitre = new javax.swing.JLabel();
        zoom = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        panneauCommandes = new javax.swing.JPanel();
        boutonsRoutier = new javax.swing.JPanel();
        selectionRoutier = new javax.swing.JToggleButton();
        ajoutIntersection = new javax.swing.JToggleButton();
        constructionTroncon = new javax.swing.JToggleButton();
        editerRoutier = new javax.swing.JToggleButton();
        suppressionRoutier = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        boutonsTransport = new javax.swing.JPanel();
        selectionTransport = new javax.swing.JToggleButton();
        ajoutArret = new javax.swing.JToggleButton();
        ajoutCircuit = new javax.swing.JToggleButton();
        suppressionTransport = new javax.swing.JButton();
        editerTransport = new javax.swing.JToggleButton();
        checkBoxDijkstra = new javax.swing.JCheckBox();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        jSeparator10 = new javax.swing.JSeparator();
        boutonsBesoins = new javax.swing.JPanel();
        selectionBesoins = new javax.swing.JToggleButton();
        ajoutBesoin = new javax.swing.JToggleButton();
        suppressionBesoins = new javax.swing.JButton();
        editerBesoins = new javax.swing.JToggleButton();
        checkBoxDijkstraBesoins = new javax.swing.JCheckBox();
        jSeparator11 = new javax.swing.JSeparator();
        jSeparator12 = new javax.swing.JSeparator();
        jSeparator13 = new javax.swing.JSeparator();
        jSeparator14 = new javax.swing.JSeparator();
        boutonsSimulation = new javax.swing.JPanel();
        playPauseSimulation = new javax.swing.JToggleButton();
        arreterSimulation = new javax.swing.JButton();
        recommancerSimulation = new javax.swing.JButton();
        ralentirSimulation = new javax.swing.JButton();
        avancerSimulation = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        facteurMultiplicatif = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jPanel9 = new javax.swing.JPanel();
        defilementAfficheur = new javax.swing.JScrollPane();
        afficheurReseau = new GUI.AfficheurReseau(this);
        jPanel8 = new javax.swing.JPanel();
        coordonnees = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        boutonsSelectionTransport = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        comboBoxArrets = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        comboBoxSources = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        comboBoxCircuits = new javax.swing.JComboBox<>();
        boutonsSelectionBesoins = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        comboBoxBesoins = new javax.swing.JComboBox<>();
        boutonsSelectionSimulation = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        comboBoxAutobus = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        comboBoxPietons = new javax.swing.JComboBox();
        boutonsSelectionRoutier = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        comboBoxTroncons = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        comboBoxIntersections = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        panelArret1 = new GUI.PanelArret();
        panelCircuit1 = new GUI.PanelCircuit();
        panelIntersection1 = new GUI.PanelIntersection();
        panelSourceAutobus1 = new GUI.PanelSourceAutobus();
        panelTroncon1 = new GUI.PanelTroncon();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        comboBoxStat = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        fichier = new javax.swing.JMenu();
        quitter = new javax.swing.JMenuItem();

        groupeModes.add(routier);
        groupeModes.add(transport);
        groupeModes.add(besoins);
        groupeModes.add(simulation);

        groupeModes.add(selectionRoutier);
        groupeModes.add(ajoutIntersection);
        groupeModes.add(constructionTroncon);

        groupeModes.add(selectionTransport);
        groupeModes.add(ajoutArret);
        groupeModes.add(ajoutCircuit);
        groupeModes.add(suppressionTransport);

        jPopupMenu1.setName(""); // NOI18N

        editerClicDroit.setText("Ã‰diter...");
        editerClicDroit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editerClicDroitActionPerformed(evt);
            }
        });
        jPopupMenu1.add(editerClicDroit);

        supprimerClicDroit.setText("Supprimer");
        supprimerClicDroit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerClicDroitActionPerformed(evt);
            }
        });
        jPopupMenu1.add(supprimerClicDroit);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1200, 600));
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        mainPanel.setMinimumSize(new java.awt.Dimension(1200, 600));
        mainPanel.setPreferredSize(new java.awt.Dimension(1600, 900));
        mainPanel.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        panneauModes.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(150, 400));
        jPanel1.setLayout(new java.awt.BorderLayout());

        boutonModes.setPreferredSize(new java.awt.Dimension(150, 400));
        boutonModes.setRequestFocusEnabled(false);
        boutonModes.setLayout(new java.awt.GridLayout(4, 1));

        routier.setText("RÃ©seau routier");
        routier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routierActionPerformed(evt);
            }
        });
        boutonModes.add(routier);

        transport.setText("RÃ©seau transport");
        transport.setEnabled(false);
        transport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transportActionPerformed(evt);
            }
        });
        boutonModes.add(transport);

        besoins.setText("Besoins transport");
        besoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                besoinsActionPerformed(evt);
            }
        });
        boutonModes.add(besoins);

        simulation.setText("Simulation");
        simulation.setEnabled(false);
        simulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulationActionPerformed(evt);
            }
        });
        boutonModes.add(simulation);

        jPanel1.add(boutonModes, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.GridLayout(2, 2));

        annuler.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        annuler.setText("Annuler");
        annuler.setEnabled(false);
        annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerActionPerformed(evt);
            }
        });
        jPanel5.add(annuler);

        retablir.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        retablir.setText("RÃ©tablir");
        retablir.setEnabled(false);
        retablir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retablirActionPerformed(evt);
            }
        });
        jPanel5.add(retablir);

        zoomTitre.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        zoomTitre.setText("Zoom : ");
        jPanel5.add(zoomTitre);

        zoom.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        zoom.setText("100 %");
        zoom.setRequestFocusEnabled(false);
        jPanel5.add(zoom);

        jPanel1.add(jPanel5, java.awt.BorderLayout.SOUTH);

        panneauModes.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel3.add(panneauModes, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.BorderLayout());

        panneauCommandes.setMinimumSize(new java.awt.Dimension(1200, 35));
        panneauCommandes.setPreferredSize(new java.awt.Dimension(1200, 35));
        panneauCommandes.setRequestFocusEnabled(false);
        panneauCommandes.setVerifyInputWhenFocusTarget(false);
        panneauCommandes.setLayout(new java.awt.CardLayout());

        boutonsRoutier.setMinimumSize(new java.awt.Dimension(1200, 35));
        boutonsRoutier.setPreferredSize(new java.awt.Dimension(1200, 35));
        boutonsRoutier.setLayout(new java.awt.GridLayout(1, 0));

        selectionRoutier.setText("SÃ©lectionner");
        selectionRoutier.setEnabled(false);
        selectionRoutier.setMaximumSize(new java.awt.Dimension(32767, 32767));
        selectionRoutier.setMinimumSize(new java.awt.Dimension(100, 35));
        selectionRoutier.setPreferredSize(new java.awt.Dimension(100, 35));
        selectionRoutier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionRoutierActionPerformed(evt);
            }
        });
        boutonsRoutier.add(selectionRoutier);

        ajoutIntersection.setText("Inter. (for noob)");
        ajoutIntersection.setMaximumSize(new java.awt.Dimension(32767, 32767));
        ajoutIntersection.setMinimumSize(new java.awt.Dimension(100, 35));
        ajoutIntersection.setPreferredSize(new java.awt.Dimension(100, 35));
        ajoutIntersection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutIntersectionActionPerformed(evt);
            }
        });
        boutonsRoutier.add(ajoutIntersection);

        constructionTroncon.setText("TronÃ§on");
        constructionTroncon.setMaximumSize(new java.awt.Dimension(32767, 32767));
        constructionTroncon.setMinimumSize(new java.awt.Dimension(100, 35));
        constructionTroncon.setPreferredSize(new java.awt.Dimension(100, 35));
        constructionTroncon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constructionTronconActionPerformed(evt);
            }
        });
        boutonsRoutier.add(constructionTroncon);

        editerRoutier.setText("Ã‰diter sÃ©lection");
        editerRoutier.setToolTipText("");
        editerRoutier.setMaximumSize(new java.awt.Dimension(32767, 32767));
        editerRoutier.setMinimumSize(new java.awt.Dimension(100, 35));
        editerRoutier.setPreferredSize(new java.awt.Dimension(100, 35));
        editerRoutier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editerRoutierActionPerformed(evt);
            }
        });
        boutonsRoutier.add(editerRoutier);

        suppressionRoutier.setText("Supprimer");
        suppressionRoutier.setMaximumSize(new java.awt.Dimension(32767, 32767));
        suppressionRoutier.setMinimumSize(new java.awt.Dimension(100, 35));
        suppressionRoutier.setPreferredSize(new java.awt.Dimension(100, 35));
        suppressionRoutier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppressionRoutierActionPerformed(evt);
            }
        });
        boutonsRoutier.add(suppressionRoutier);

        jSeparator1.setMinimumSize(new java.awt.Dimension(100, 35));
        jSeparator1.setPreferredSize(new java.awt.Dimension(100, 35));
        boutonsRoutier.add(jSeparator1);

        jSeparator2.setMinimumSize(new java.awt.Dimension(100, 35));
        jSeparator2.setPreferredSize(new java.awt.Dimension(100, 35));
        boutonsRoutier.add(jSeparator2);

        jSeparator3.setMinimumSize(new java.awt.Dimension(100, 35));
        jSeparator3.setPreferredSize(new java.awt.Dimension(100, 35));
        boutonsRoutier.add(jSeparator3);

        jSeparator4.setMinimumSize(new java.awt.Dimension(100, 35));
        jSeparator4.setPreferredSize(new java.awt.Dimension(100, 35));
        boutonsRoutier.add(jSeparator4);

        jSeparator5.setMinimumSize(new java.awt.Dimension(100, 35));
        jSeparator5.setPreferredSize(new java.awt.Dimension(100, 35));
        boutonsRoutier.add(jSeparator5);

        panneauCommandes.add(boutonsRoutier, "card2");

        boutonsTransport.setAlignmentX(1.0F);
        boutonsTransport.setAlignmentY(1.0F);
        boutonsTransport.setMinimumSize(new java.awt.Dimension(1200, 35));
        boutonsTransport.setPreferredSize(new java.awt.Dimension(1200, 35));
        boutonsTransport.setLayout(new java.awt.GridLayout(1, 0));

        selectionTransport.setText("SÃ©lectionner");
        selectionTransport.setEnabled(false);
        selectionTransport.setPreferredSize(new java.awt.Dimension(100, 35));
        selectionTransport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionTransportActionPerformed(evt);
            }
        });
        boutonsTransport.add(selectionTransport);

        ajoutArret.setText("ArrÃªt (for noob)");
        ajoutArret.setToolTipText("");
        ajoutArret.setPreferredSize(new java.awt.Dimension(100, 35));
        ajoutArret.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutArretActionPerformed(evt);
            }
        });
        boutonsTransport.add(ajoutArret);

        ajoutCircuit.setText("Circuit");
        ajoutCircuit.setPreferredSize(new java.awt.Dimension(100, 35));
        ajoutCircuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutCircuitActionPerformed(evt);
            }
        });
        boutonsTransport.add(ajoutCircuit);

        suppressionTransport.setText("Supprimer");
        suppressionTransport.setEnabled(false);
        suppressionTransport.setPreferredSize(new java.awt.Dimension(100, 35));
        suppressionTransport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppressionTransportActionPerformed(evt);
            }
        });
        boutonsTransport.add(suppressionTransport);

        editerTransport.setText("Ã‰diter sÃ©lection");
        editerTransport.setPreferredSize(new java.awt.Dimension(100, 35));
        editerTransport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editerTransportActionPerformed(evt);
            }
        });
        boutonsTransport.add(editerTransport);

        checkBoxDijkstra.setSelected(true);
        checkBoxDijkstra.setText("Dijkstra");
        checkBoxDijkstra.setPreferredSize(new java.awt.Dimension(100, 35));
        checkBoxDijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxDijkstraActionPerformed(evt);
            }
        });
        boutonsTransport.add(checkBoxDijkstra);
        boutonsTransport.add(jSeparator6);
        boutonsTransport.add(jSeparator7);
        boutonsTransport.add(jSeparator9);
        boutonsTransport.add(jSeparator10);

        panneauCommandes.add(boutonsTransport, "card3");

        boutonsBesoins.setAlignmentX(1.0F);
        boutonsBesoins.setAlignmentY(1.0F);
        boutonsBesoins.setMinimumSize(new java.awt.Dimension(1200, 35));
        boutonsBesoins.setPreferredSize(new java.awt.Dimension(1200, 35));
        boutonsBesoins.setLayout(new java.awt.GridLayout(1, 0));

        selectionBesoins.setText("SÃ©lectionner");
        selectionBesoins.setEnabled(false);
        selectionBesoins.setPreferredSize(new java.awt.Dimension(100, 35));
        selectionBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionBesoinsActionPerformed(evt);
            }
        });
        boutonsBesoins.add(selectionBesoins);

        ajoutBesoin.setText("Besoin");
        ajoutBesoin.setToolTipText("");
        ajoutBesoin.setPreferredSize(new java.awt.Dimension(100, 35));
        ajoutBesoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutBesoinActionPerformed(evt);
            }
        });
        boutonsBesoins.add(ajoutBesoin);

        suppressionBesoins.setText("Supprimer");
        suppressionBesoins.setEnabled(false);
        suppressionBesoins.setPreferredSize(new java.awt.Dimension(100, 35));
        suppressionBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppressionBesoinsActionPerformed(evt);
            }
        });
        boutonsBesoins.add(suppressionBesoins);

        editerBesoins.setText("Ã‰diter sÃ©lection");
        editerBesoins.setPreferredSize(new java.awt.Dimension(100, 35));
        editerBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editerBesoinsActionPerformed(evt);
            }
        });
        boutonsBesoins.add(editerBesoins);

        checkBoxDijkstraBesoins.setSelected(true);
        checkBoxDijkstraBesoins.setText("Dijkstra");
        checkBoxDijkstraBesoins.setPreferredSize(new java.awt.Dimension(100, 35));
        checkBoxDijkstraBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxDijkstraBesoinsActionPerformed(evt);
            }
        });
        boutonsBesoins.add(checkBoxDijkstraBesoins);
        boutonsBesoins.add(jSeparator11);
        boutonsBesoins.add(jSeparator12);
        boutonsBesoins.add(jSeparator13);
        boutonsBesoins.add(jSeparator14);

        panneauCommandes.add(boutonsBesoins, "card3");

        boutonsSimulation.setMinimumSize(new java.awt.Dimension(1200, 35));
        boutonsSimulation.setPreferredSize(new java.awt.Dimension(1200, 35));
        boutonsSimulation.setLayout(new java.awt.GridLayout(1, 0));

        playPauseSimulation.setText("Lancer!");
        playPauseSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playPauseSimulationActionPerformed(evt);
            }
        });
        boutonsSimulation.add(playPauseSimulation);

        arreterSimulation.setText("ArrÃªter");
        arreterSimulation.setEnabled(false);
        arreterSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arreterSimulationActionPerformed(evt);
            }
        });
        boutonsSimulation.add(arreterSimulation);

        recommancerSimulation.setText("Recommencer");
        recommancerSimulation.setEnabled(false);
        recommancerSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommancerSimulationActionPerformed(evt);
            }
        });
        boutonsSimulation.add(recommancerSimulation);

        ralentirSimulation.setText("Ralentir / 2");
        ralentirSimulation.setEnabled(false);
        ralentirSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ralentirSimulationActionPerformed(evt);
            }
        });
        boutonsSimulation.add(ralentirSimulation);

        avancerSimulation.setText("Avancer X 2");
        avancerSimulation.setEnabled(false);
        avancerSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avancerSimulationActionPerformed(evt);
            }
        });
        boutonsSimulation.add(avancerSimulation);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Heure : ");
        boutonsSimulation.add(jLabel1);
        boutonsSimulation.add(time);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Facteur multiplicatif : ");
        boutonsSimulation.add(jLabel2);
        boutonsSimulation.add(facteurMultiplicatif);
        boutonsSimulation.add(jSeparator8);

        panneauCommandes.add(boutonsSimulation, "card4");

        jPanel6.add(panneauCommandes, java.awt.BorderLayout.NORTH);

        jPanel9.setLayout(new java.awt.BorderLayout());

        defilementAfficheur.setPreferredSize(new java.awt.Dimension(1300, 800));
        defilementAfficheur.setWheelScrollingEnabled(false);

        afficheurReseau.setEnabled(false);
        afficheurReseau.setPreferredSize(new java.awt.Dimension(1600, 900));
        afficheurReseau.setBackground(Color.WHITE);
        afficheurReseau.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                afficheurReseauMouseMoved(evt);
            }
        });
        afficheurReseau.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                afficheurReseauMouseWheelMoved(evt);
            }
        });
        afficheurReseau.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                afficheurReseauMousePressed(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                afficheurReseauMouseExited(evt);
            }
        });

        javax.swing.GroupLayout afficheurReseauLayout = new javax.swing.GroupLayout(afficheurReseau);
        afficheurReseau.setLayout(afficheurReseauLayout);
        afficheurReseauLayout.setHorizontalGroup(
            afficheurReseauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1600, Short.MAX_VALUE)
        );
        afficheurReseauLayout.setVerticalGroup(
            afficheurReseauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );

        defilementAfficheur.setViewportView(afficheurReseau);

        jPanel9.add(defilementAfficheur, java.awt.BorderLayout.CENTER);

        jPanel8.setPreferredSize(new java.awt.Dimension(1445, 15));
        jPanel8.setLayout(new java.awt.BorderLayout());

        coordonnees.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        coordonnees.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel8.add(coordonnees, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jPanel6.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel12.setPreferredSize(new java.awt.Dimension(150, 400));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel14.setPreferredSize(new java.awt.Dimension(150, 250));

        boutonsSelectionTransport.setAlignmentX(1.0F);
        boutonsSelectionTransport.setAlignmentY(1.0F);
        boutonsSelectionTransport.setOpaque(false);
        boutonsSelectionTransport.setPreferredSize(new java.awt.Dimension(90, 120));
        boutonsSelectionTransport.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        jLabel8.setText("ArrÃªts :");
        boutonsSelectionTransport.add(jLabel8);

        comboBoxArrets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxArrets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxArretsActionPerformed(evt);
            }
        });
        boutonsSelectionTransport.add(comboBoxArrets);

        jLabel9.setText("Sources :");
        boutonsSelectionTransport.add(jLabel9);

        comboBoxSources.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxSources.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSourcesActionPerformed(evt);
            }
        });
        boutonsSelectionTransport.add(comboBoxSources);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("SÃ©lection Circuit:");
        boutonsSelectionTransport.add(jLabel3);

        comboBoxCircuits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxCircuits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCircuitsActionPerformed(evt);
            }
        });
        boutonsSelectionTransport.add(comboBoxCircuits);

        boutonsSelectionBesoins.setAlignmentX(1.0F);
        boutonsSelectionBesoins.setAlignmentY(1.0F);
        boutonsSelectionBesoins.setOpaque(false);
        boutonsSelectionBesoins.setPreferredSize(new java.awt.Dimension(90, 120));
        boutonsSelectionBesoins.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        jLabel7.setText("Besoins :");
        boutonsSelectionBesoins.add(jLabel7);

        comboBoxBesoins.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxBesoinsActionPerformed(evt);
            }
        });
        boutonsSelectionBesoins.add(comboBoxBesoins);

        boutonsSelectionSimulation.setAlignmentX(1.0F);
        boutonsSelectionSimulation.setAlignmentY(1.0F);
        boutonsSelectionSimulation.setOpaque(false);
        boutonsSelectionSimulation.setPreferredSize(new java.awt.Dimension(90, 120));
        boutonsSelectionSimulation.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        jLabel10.setText("Autobus :");
        boutonsSelectionSimulation.add(jLabel10);

        comboBoxAutobus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxAutobus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxAutobusActionPerformed(evt);
            }
        });
        boutonsSelectionSimulation.add(comboBoxAutobus);

        jLabel11.setText("PiÃ©tons :");
        boutonsSelectionSimulation.add(jLabel11);

        comboBoxPietons.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aucun" }));
        comboBoxPietons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPietonsActionPerformed(evt);
            }
        });
        boutonsSelectionSimulation.add(comboBoxPietons);

        boutonsSelectionRoutier.setAlignmentX(1.0F);
        boutonsSelectionRoutier.setAlignmentY(1.0F);
        boutonsSelectionRoutier.setOpaque(false);
        boutonsSelectionRoutier.setPreferredSize(new java.awt.Dimension(90, 120));
        boutonsSelectionRoutier.setLayout(new java.awt.GridLayout(0, 1, 0, 10));

        jLabel4.setText("TronÃ§ons :");
        boutonsSelectionRoutier.add(jLabel4);

        comboBoxTroncons.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxTroncons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTronconsActionPerformed(evt);
            }
        });
        boutonsSelectionRoutier.add(comboBoxTroncons);

        jLabel5.setText("Intersections :");
        boutonsSelectionRoutier.add(jLabel5);

        comboBoxIntersections.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aucun" }));
        comboBoxIntersections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxIntersectionsActionPerformed(evt);
            }
        });
        boutonsSelectionRoutier.add(comboBoxIntersections);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boutonsSelectionTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(boutonsSelectionSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(boutonsSelectionRoutier, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(boutonsSelectionBesoins, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boutonsSelectionTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                    .addContainerGap(92, Short.MAX_VALUE)
                    .addComponent(boutonsSelectionSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                    .addContainerGap(92, Short.MAX_VALUE)
                    .addComponent(boutonsSelectionRoutier, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel14Layout.createSequentialGroup()
                    .addGap(132, 132, 132)
                    .addComponent(boutonsSelectionBesoins, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(52, Short.MAX_VALUE)))
        );

        jPanel12.add(jPanel14, java.awt.BorderLayout.PAGE_END);

        jPanel2.setPreferredSize(new java.awt.Dimension(400, 624));
        jPanel2.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 624, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel7, "card7");

        panelArret1.setBorder(javax.swing.BorderFactory.createTitledBorder("ArrÃªt"));
        jPanel2.add(panelArret1, "card2");

        panelCircuit1.setBorder(javax.swing.BorderFactory.createTitledBorder("Circuit"));
        jPanel2.add(panelCircuit1, "card3");

        panelIntersection1.setBorder(javax.swing.BorderFactory.createTitledBorder("Intersection"));
        jPanel2.add(panelIntersection1, "card4");

        panelSourceAutobus1.setBorder(javax.swing.BorderFactory.createTitledBorder("Source d'autobus"));
        jPanel2.add(panelSourceAutobus1, "card5");

        panelTroncon1.setBorder(javax.swing.BorderFactory.createTitledBorder("TronÃ§on"));
        jPanel2.add(panelTroncon1, "card6");

        jPanel12.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel12, java.awt.BorderLayout.EAST);

        jTabbedPane1.addTab("SimulatHEURE", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ItinÃ©raire", "Temps minimum", "Temps moyen", "Temps maximum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel10.setPreferredSize(new java.awt.Dimension(50, 50));

        comboBoxStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxStatActionPerformed(evt);
            }
        });

        jLabel6.setText("Simulation :");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel6)
                .addGap(78, 78, 78)
                .addComponent(comboBoxStat, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1225, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxStat, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        jPanel4.add(jPanel10, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("Statistiques", jPanel4);

        mainPanel.add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("SimulatHeure");

        getContentPane().add(mainPanel);

        fichier.setText("Fichier");

        quitter.setText("Quitter");
        quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterActionPerformed(evt);
            }
        });
        fichier.add(quitter);

        menu.add(fichier);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterActionPerformed
        
        System.exit(0);
    }//GEN-LAST:event_quitterActionPerformed

    private void routierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routierActionPerformed

        this.setMode(Mode.ROUTIER);
        boutonsRoutier.setVisible(true);
        boutonsSelectionRoutier.setVisible(true);
        constructionTroncon.doClick();
    }//GEN-LAST:event_routierActionPerformed

    private void transportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transportActionPerformed

        this.setMode(Mode.TRANSPORT);
        boutonsTransport.setVisible(true);
        boutonsSelectionTransport.setVisible(true);
        ajoutCircuit.doClick();
    }//GEN-LAST:event_transportActionPerformed

    private void besoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_besoinsActionPerformed
        
        this.setMode(Mode.BESOINS);
        boutonsBesoins.setVisible(true);
        boutonsSelectionBesoins.setVisible(true);
        ajoutBesoin.doClick();
    }//GEN-LAST:event_besoinsActionPerformed

    private void simulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulationActionPerformed
        
        this.setMode(Mode.SIMULATION);
        boutonsSelectionSimulation.setVisible(true);
        boutonsSimulation.setVisible(true);   
    }//GEN-LAST:event_simulationActionPerformed

    private void agrandirAfficheur()
    {
        boolean intersectionAjoutee = true;
        afficheurReseau.setDimension(intersectionAjoutee);
        defilementAfficheur.setViewportView(afficheurReseau);
    }
    
    private void statistiques(){
        m_statistiques.getFirst();
        jTable1.setValueAt("allo", 2,2);
    }
    
    private void afficheurReseauMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_afficheurReseauMousePressed
        float echelle = afficheurReseau.getEchelle();
        if (SwingUtilities.isLeftMouseButton(evt)) {

            switch (m_mode_courant) {
                case ROUTIER:

                    switch (m_commande_courante) {
                        case SELECTIONNER:
                            ElementRoutier elemRoutier = m_controleur.selectionnerElementRoutier(evt.getX(), evt.getY(), echelle, evt.isControlDown());
                            
                            break;

                        case INTERSECTION:
                            m_controleur.ajouterIntersection(evt.getX(), evt.getY(), echelle);
                            agrandirAfficheur();
                            miseAjourSelectionIntersectionsAjout();
                            
                            
                            break;

                        case TRONCON:
                            try
                            {
                                m_controleur.construireTroncon(evt.getX(), evt.getY(), echelle);
                                miseAjourSelectionTronconsAjout();
                            }
                            catch (IllegalArgumentException e)
                            {
                                JOptionPane.showMessageDialog(null, e.getMessage(), e.getCause().getMessage(), JOptionPane.WARNING_MESSAGE);
                            }
                            
                            miseAjourSelectionIntersectionsAjout();
                            agrandirAfficheur();

                            break;

                        default:
                            break;
                    }
                    break;
                case TRANSPORT:
                    switch (m_commande_courante) {

                        case SELECTIONNER:
                            m_controleur.deselectionnerRoutier();
                            ElementTransport et = m_controleur.selectionnerElementTransport(evt.getX(), evt.getY(), echelle, evt.isControlDown());
                            
                            break;

                        case CIRCUIT:
                            Boolean circuitConstruit = false;
                            try {
                                circuitConstruit = m_controleur.construireCircuit(evt.getX(), evt.getY(), echelle);
                            }
                            catch(IllegalArgumentException e) {
                                JOptionPane.showMessageDialog(null, e.getMessage(), e.getCause().getMessage(), JOptionPane.WARNING_MESSAGE);
                            }
                            if (circuitConstruit)
                            {
                                miseAjourSelectionCircuitsAjout();
                                panelCircuit1.afficheInfo((Circuit)m_controleur.getTransport().getPileSelection().getDessus());
                            }
                            
                            miseAjourSelectionArretsAjout();
                            break;

                        case SOURCEAUTOBUS:
                            ElementTransport elemSelectionne = m_controleur.getTransport().getPileSelection().getDessus();
                            
                            if (elemSelectionne == null || elemSelectionne.getClass() != Circuit.class) break;
                            
                            ElementTransport elementTransport = m_controleur.obtenirElementTransport(evt.getX(), evt.getY(), echelle);
                            if (elementTransport!= null && elementTransport.getClass()!=SourceAutobus.class) {
                                m_controleur.ajouterSource(evt.getX(), evt.getY(), echelle);
                                m_controleur.deselectionnerRoutier();
                                miseAjourSelectionSourcesAjout();
                                m_controleur.getTransport().getPileSelection().ajouter(elemSelectionne);
                                
                              }
                            break;
                        case ARRET:
                            if (m_controleur.ajouterArret(evt.getX(), evt.getY(), echelle))
                                miseAjourSelectionArretsAjout();
                            
                            break;

                        default:
                            break;
                    }
                    break;
                case BESOINS:
                    switch (m_commande_courante) {

                        case SELECTIONNER:
                            m_controleur.deselectionnerBesoins();
                            ElementBesoins eb = m_controleur.selectionnerElementBesoins(evt.getX(), evt.getY(), echelle, evt.isControlDown());
                         
                            break;

                        case BESOIN:
                            Boolean besoinConstruit = false;
                            try {
                                besoinConstruit = m_controleur.construireItineraire(evt.getX(), evt.getY(), echelle);
                            }
                            catch(IllegalArgumentException e) {
                                JOptionPane.showMessageDialog(null, e.getMessage(), e.getCause().getMessage(), JOptionPane.WARNING_MESSAGE);
                            }
                            if (besoinConstruit)
                            {
                                //miseAjourSelectionCircuitsAjout(); 
                                //panelItineraire.afficheInfo((Itineraire)m_controleur.getBesoins().getPileSelection().getDessus());
                            }
                            
                            miseAjourSelectionArretsAjout();
                            break;
                        default:
                            break;
                    }
                    break;
                    
                case SIMULATION:

                    break;

                default:
                    break;
            }
        } else if (SwingUtilities.isRightMouseButton(evt)) {
            switch (m_mode_courant) {
                case ROUTIER:
                    m_controleur.deselectionnerTout();
                    ElementRoutier elemRoutier = m_controleur.selectionnerElementRoutier(evt.getX(), evt.getY(), echelle, false);
                    
                    if (elemRoutier != null) {
                        jPopupMenu1.show(this.afficheurReseau, evt.getX(), evt.getY());
                    }
                    break;

                case TRANSPORT:
                    m_controleur.deselectionnerTout();
                    ElementTransport elemTransport = m_controleur.selectionnerElementTransport(evt.getX(), evt.getY(), echelle, false);
                    if (elemTransport != null) {
                        jPopupMenu1.show(this.afficheurReseau, evt.getX(), evt.getY());
                    }
            }
        }
        miseAJourPanels();
        miseAJourPermissionsBoutons();
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_afficheurReseauMousePressed

    private void miseAjourStatApresSimulation(){
        if(m_idSimuli.size() == 0){
             m_idSimuli.addLast(1);
        }
        else{
             m_idSimuli.addLast(m_idSimuli.getLast() +1);
        }
        comboBoxStat.removeAllItems();
        for( Integer inte : m_idSimuli){
            comboBoxStat.addItem(Integer.toString(inte));
        }
    }
    private void miseAjoutAutobusComboBox() {
        comboBoxAutobus.removeAllItems();
        comboBoxAutobus.addItem("Aucun");
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            for (ListIterator<Autobus> autobuss = circuit.getListeAutobus().listIterator(); autobuss.hasNext();) {
                Autobus autobus = autobuss.next();
                comboBoxAutobus.addItem(autobus.getID());
            }

        }
    }

    public void miseAjourComboBoxTotal() {
        Commande cmdTemp = this.m_commande_courante;  // wtf la commande change..
        
        comboBoxCircuits.removeAllItems();
        comboBoxSources.removeAllItems();
        comboBoxArrets.removeAllItems();
        comboBoxIntersections.removeAllItems();
        comboBoxTroncons.removeAllItems();
        comboBoxCircuits.addItem("Aucun");
        comboBoxSources.addItem("Aucun");
        comboBoxArrets.addItem("Aucun");
        comboBoxIntersections.addItem("Aucun");
        comboBoxTroncons.addItem("Aucun");
        
        m_commande_courante = cmdTemp;  // wtf la commande change..
        
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            comboBoxCircuits.addItem(circuit.getNom());
        }
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            for (ListIterator<SourceAutobus> sources = circuit.getListeSources().listIterator(); sources.hasNext();) {
                SourceAutobus source = sources.next();
                comboBoxSources.addItem(source.getNom());
            }

        }
        for (ListIterator<Arret> arrets = m_controleur.getTransport().getListeArrets().listIterator(); arrets.hasNext();) {
            Arret arret = arrets.next();
            comboBoxArrets.addItem(arret.getNom());
        }
        for (ListIterator<Intersection> intersections = m_controleur.getRoutier().getIntersections().listIterator(); intersections.hasNext();) {
            Intersection intersection = intersections.next();
            comboBoxIntersections.addItem(intersection.getName());
        }
        for (ListIterator<Intersection> intersections = m_controleur.getRoutier().getIntersections().listIterator(); intersections.hasNext();) {
            Intersection intersection = intersections.next();
            for (ListIterator<Troncon> troncons = intersection.getTroncons().listIterator(); troncons.hasNext();) {
                Troncon troncon = troncons.next();
                comboBoxTroncons.addItem(troncon.getNom());
            }
        }
    }

    private void miseAjourSelectionCircuitsAjout() {
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            boolean add = true;
            Circuit circuit = circuits.next();
            String name = circuit.getNom();
            for (int i = 0; i < comboBoxCircuits.getItemCount(); i++) {
                String tmp = comboBoxCircuits.getItemAt(i);
                if (tmp == name) {
                    add = false;
                }
            }
            if (add) {
                comboBoxCircuits.addItem(circuit.getNom());
            }
        }
    }

    private void miseAjourSelectionSourcesAjout() {
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            for (ListIterator<SourceAutobus> sources = circuit.getListeSources().listIterator(); sources.hasNext();) {
                SourceAutobus source = sources.next();
                boolean add = true;

                String name = source.getNom();
                for (int i = 0; i < comboBoxSources.getItemCount(); i++) {
                    String tmp = comboBoxSources.getItemAt(i);
                    if (tmp.equals(name)) {
                        add = false;
                    }
                }
                if (add) {
                    comboBoxSources.addItem(source.getNom());
                }
            }
        }
    }

    private void miseAjourSelectionArretsAjout() {
        for (ListIterator<Arret> arrets = m_controleur.getTransport().getListeArrets().listIterator(); arrets.hasNext();) {
            Arret arret = arrets.next();
            boolean add = true;
            String name = arret.getNom();
            for (int i = 0; i < comboBoxArrets.getItemCount(); i++) {
                String tmp = comboBoxArrets.getItemAt(i);
                if (tmp.equals(name)) {
                    add = false;
                }
            }
            if (add) {
                comboBoxArrets.addItem(arret.getNom());
            }
        }
    }

    private void miseAjourSelectionIntersectionsAjout() {
        for (ListIterator<Intersection> intersections = m_controleur.getRoutier().getIntersections().listIterator(); intersections.hasNext();) {
            Intersection intersection = intersections.next();
            boolean add = true;
            String name = intersection.getName();
            for (int i = 0; i < comboBoxIntersections.getItemCount(); i++) {
                String tmp = comboBoxIntersections.getItemAt(i);
                if (tmp == name) {
                    add = false;
                }
            }
            if (add) {
                comboBoxIntersections.addItem(intersection.getName());
            }
        }
    }

    private void miseAjourSelectionAutobusAjout() {
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            for (ListIterator<Autobus> autobuss = circuit.getListeAutobus().listIterator(); autobuss.hasNext();) {
                Autobus autobus = autobuss.next();
                boolean add = true;
                String name = autobus.getID();
                for (int i = 0; i < comboBoxAutobus.getItemCount(); i++) {
                    String tmp = comboBoxAutobus.getItemAt(i);
                    if (tmp == name) {
                        add = false;
                    }
                }
                if (add) {
                    comboBoxAutobus.addItem(autobus.getID());
                }
            }
        }
    }

    private void miseAjourSelectionTronconsAjout() {
        for (ListIterator<Intersection> intersections = m_controleur.getRoutier().getIntersections().listIterator(); intersections.hasNext();) {
            Intersection intersection = intersections.next();
            for (ListIterator<Troncon> troncons = intersection.getTroncons().listIterator(); troncons.hasNext();) {
                Troncon troncon = troncons.next();
                boolean add = true;
                String name = troncon.getNom();
                for (int i = 0; i < comboBoxTroncons.getItemCount(); i++) {
                    String tmp = comboBoxTroncons.getItemAt(i);
                    if (tmp == name) {
                        add = false;
                    }
                }
                if (add) {
                    comboBoxTroncons.addItem(troncon.getNom());
                }
            }
        }
    }
    private void afficheurReseauMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_afficheurReseauMouseWheelMoved

        float echelleInitiale = afficheurReseau.getEchelle();
        afficheurReseau.setEchelle(evt.getWheelRotation());
        float rapportEchelles = afficheurReseau.getEchelle() / echelleInitiale;

        int x = defilementAfficheur.getViewport().getViewPosition().x;
        x = (int) (evt.getX() * (rapportEchelles - 1)) + x;

        int y = defilementAfficheur.getViewport().getViewPosition().y;
        y = (int) (evt.getY() * (rapportEchelles - 1)) + y;

        defilementAfficheur.getViewport().setViewPosition(new java.awt.Point(x, y));
        zoom.setText(Integer.toString((int) (afficheurReseau.getEchelle() * 100)) + " %");
        
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_afficheurReseauMouseWheelMoved

    private void afficheurReseauMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_afficheurReseauMouseMoved

        float x = evt.getX() / afficheurReseau.getEchelle();
        float y = evt.getY() / afficheurReseau.getEchelle();
        coordonnees.setText(String.format("%.1f", x) + " m  " + String.format("%.1f", y) + " m");
        
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_afficheurReseauMouseMoved

    private void afficheurReseauMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_afficheurReseauMouseExited
        coordonnees.setText("");
        
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_afficheurReseauMouseExited

    private void selectionRoutierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionRoutierActionPerformed
        this.setCommande(Commande.SELECTIONNER);
    }//GEN-LAST:event_selectionRoutierActionPerformed

    private void ajoutIntersectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutIntersectionActionPerformed

        this.setCommande(Commande.INTERSECTION);
        m_controleur.deselectionnerRoutier();

        this.afficheurReseau.repaint();
    }//GEN-LAST:event_ajoutIntersectionActionPerformed

    private void constructionTronconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constructionTronconActionPerformed

        this.setCommande(Commande.TRONCON);
        m_controleur.deselectionnerRoutier();

        this.afficheurReseau.repaint();
    }//GEN-LAST:event_constructionTronconActionPerformed

    private void suppressionRoutierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppressionRoutierActionPerformed
        boolean suppressionOK = false;
        suppressionOK = m_controleur.supprimerSelectionRoutier();
        if (!suppressionOK){
            JOptionPane.showMessageDialog(null, "Un Ã©lÃ©ment ne peut pas Ãªtre supprimÃ© car un Ã©lÃ©ment du rÃ©seau de transports en dÃ©pend.", "Suppression impossible", JOptionPane.ERROR_MESSAGE);
        }

        miseAjourComboBoxTotal();
        miseAJourPermissionsBoutons();
        miseAJourPanels();
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_suppressionRoutierActionPerformed
    
    private void editerElement() {
        switch (m_mode_courant) {
            case ROUTIER:
                LinkedList<ElementRoutier> elementsRoutiersSelectionnes = m_controleur.getElementsSelectionnesRoutier();
                if (elementsRoutiersSelectionnes == null || elementsRoutiersSelectionnes.size() == 0) return;
                ElementRoutier elemRoutier = elementsRoutiersSelectionnes.getLast();

                //ouvrir une fenetre contextuelle qui agit sur elem, dependamment du type d'elem
                if (elemRoutier.getClass() == Intersection.class) {
                    EditerIntersection fenetre = new EditerIntersection();
                    fenetre.setIntersection((Intersection) elemRoutier, this);
                    fenetre.setResizable(false);
                    fenetre.setLocationRelativeTo(null); //pour centrer
                    fenetre.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    fenetre.setVisible(true);
                } else if (elemRoutier.getClass() == Troncon.class) {
                    double ancienTempsMoyen = ((Troncon)elemRoutier).getDistribution().getTempsMoyen().getTemps();
                    EditerTroncon fenetre = new EditerTroncon();
                    fenetre.getTroncon((Troncon) elemRoutier, this);
                    fenetre.setResizable(false);
                    fenetre.setLocationRelativeTo(null); //pour centrer
                    fenetre.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    fenetre.setVisible(true);
                }
                break;

            case TRANSPORT:
                LinkedList<ElementTransport> elementsTransportSelectionnes = m_controleur.getElementsSelectionnesTransport();
                if (elementsTransportSelectionnes.getFirst() == null) return;
                ElementTransport elemTransport = elementsTransportSelectionnes.getLast();

                if (elemTransport.getClass() == SourceAutobus.class) {
                    EditerSource fenetre = new EditerSource();
                    fenetre.setSource((SourceAutobus) elemTransport, this);
                    fenetre.setResizable(false);
                    fenetre.setLocationRelativeTo(null); //pour centrer
                    fenetre.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    fenetre.setVisible(true);
                } else if (elemTransport.getClass() == Arret.class) {
                    EditerArret fenetre = new EditerArret();
                    fenetre.setArret((Arret) elemTransport, this);
                    fenetre.setResizable(false);
                    fenetre.setLocationRelativeTo(null); //pour centrer
                    fenetre.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    fenetre.setVisible(true);
                } else if (elemTransport.getClass() == Circuit.class) {
                    EditerCircuit fenetre = new EditerCircuit();
                    fenetre.setCircuit((Circuit) elemTransport, this);
                    fenetre.setResizable(false);
                    fenetre.setLocationRelativeTo(null); //pour centrer
                    fenetre.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    fenetre.setVisible(true);
                }
        }
    }
    private void editerClicDroitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editerClicDroitActionPerformed
        editerElement();
    }//GEN-LAST:event_editerClicDroitActionPerformed

    public void supprimerElementPanel(){
        suppression();
    }
    
    private void supprimerClicDroitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerClicDroitActionPerformed
        suppression();
    }//GEN-LAST:event_supprimerClicDroitActionPerformed

    private void suppression(){
        switch (m_mode_courant) {
            case ROUTIER:
                suppressionRoutier.doClick();
                break;

            case TRANSPORT:
                suppressionTransport.doClick();
                break;

            case BESOINS:
                break;

            case SIMULATION:
                break;
        }
        this.afficheurReseau.repaint();
    }
    
    private void initialiserPanels(){
        panelIntersection1.setMainWindow(m_this);
        panelTroncon1.setMainWindow(m_this);
        panelArret1.setMainWindow(m_this);
        panelCircuit1.setMainWindow(m_this);
        panelSourceAutobus1.setMainWindow(m_this);
        disparaitrePanels();
    }
    
    public void miseAJourPanels(){
        disparaitrePanels();
        switch(m_mode_courant){
            case ROUTIER:
                ElementRoutier er = m_controleur.getRoutier().getPileSelection().getDessus();
                if(er!=null)
                    afficherPanelRoutier(er);
                break;
            
            case TRANSPORT:
                ElementTransport et = m_controleur.getTransport().getPileSelection().getDessus();
                if(et!=null)
                    afficherPanelTransport(et);
                break;
                
            default:
                break;
        }
    }
    
    private void disparaitrePanels(){
        jPanel7.setVisible(false);
        panelTroncon1.setVisible(false);
        panelIntersection1.setVisible(false);
        panelArret1.setVisible(false);
        panelCircuit1.setVisible(false);
        panelSourceAutobus1.setVisible(false);
    }
    
    private void afficherPanelRoutier(ElementRoutier elemRoutier){
        
        if (elemRoutier != null){
            disparaitrePanels();
            if (elemRoutier.getClass() == Troncon.class) {
                panelTroncon1.setVisible(true);
                panelTroncon1.afficheInfo((Troncon) elemRoutier);
            }
            else if (elemRoutier.getClass() == Intersection.class) {
                panelIntersection1.setVisible(true);
                panelIntersection1.afficheInfo((Intersection) elemRoutier);
            }
        }
    }
    
    private void afficherPanelTransport(ElementTransport elemTransport){
        
        if (elemTransport != null){
            disparaitrePanels();
            if (elemTransport.getClass() == Arret.class) {
                panelArret1.setVisible(true);
                panelArret1.afficheInfo((Arret) elemTransport);
            }
            else if (elemTransport.getClass() == SourceAutobus.class) {
                panelSourceAutobus1.setVisible(true);
                SourceAutobus src = (SourceAutobus) elemTransport;
                Circuit circ = m_controleur.obtenirCircuitDeSource(src);
                panelSourceAutobus1.afficheInfo(src, circ);
            }
            else if (elemTransport.getClass() == Circuit.class){
                panelCircuit1.setVisible(true);
                panelCircuit1.afficheInfo((Circuit) elemTransport);
            }
        }
    }
    
    private void selectionTransportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionTransportActionPerformed
        this.setCommande(Commande.SELECTIONNER);
    }//GEN-LAST:event_selectionTransportActionPerformed

    private void ajoutArretActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutArretActionPerformed

        this.setCommande(Commande.ARRET);
        m_controleur.deselectionnerTout();

        this.afficheurReseau.repaint();
    }//GEN-LAST:event_ajoutArretActionPerformed

    private void ajoutCircuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutCircuitActionPerformed

        this.setCommande(Commande.CIRCUIT);
        //m_controleur.deselectionnerTout();

        this.afficheurReseau.repaint();
    }//GEN-LAST:event_ajoutCircuitActionPerformed

    private void suppressionTransportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppressionTransportActionPerformed
        boolean elementTransportSupprime = false;

        elementTransportSupprime = m_controleur.supprimerSelectionTransport();
        if (!elementTransportSupprime) {
            JOptionPane.showMessageDialog(null, "Un arrÃªt ne peut pas Ãªtre supprimÃ© car un circuit en dÃ©pend", "Suppression impossible", JOptionPane.ERROR_MESSAGE);
        }
        
        miseAjourComboBoxTotal();
        miseAJourPermissionsBoutons();
        miseAJourPanels();
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_suppressionTransportActionPerformed

        
    public void ajoutSource(){
        m_controleur.deselectionnerRoutier();
        this.afficheurReseau.repaint();
        this.setCommande(Commande.SOURCEAUTOBUS);
    }
    private void annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerActionPerformed
        m_controleur.annuler();
        miseAJourPermissionsBoutons();
        
        this.afficheurReseau.repaint();        
    }//GEN-LAST:event_annulerActionPerformed

    private void retablirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retablirActionPerformed
        m_controleur.retablir();
        miseAJourPermissionsBoutons();
        
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_retablirActionPerformed
    
    private void alalEditSimulation() {
        EditerSimulation fenetre= new EditerSimulation();{
        fenetre.setMainWindow(m_this);
        fenetre.setResizable(false);
        fenetre.setLocationRelativeTo(null); //pour centrer
       // fenetre.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        fenetre.setVisible(true);
        this.setEnabled(false);
        }
    }
    
    public void lancerSimulation() {
        m_simulationEstLancer = true;
        boutonsSimulation.setVisible(true);
        m_timer = new Timer(0, new MyTimerActionListener());
        m_crono = new Chronometre();
        m_timer.setDelay(1);
        m_controleur.demarrerSimulation();
        m_crono.start();
        m_timer.start();
    }
    
    private void playPauseSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playPauseSimulationActionPerformed
        routier.setEnabled(false);
        transport.setEnabled(false);
        besoins.setEnabled(false);
        
        recommancerSimulation.setEnabled(true);
        arreterSimulation.setEnabled(true);
        avancerSimulation.setEnabled(true);
        ralentirSimulation.setEnabled(true);
        
        if(!m_simulationEstLancer ){
            alalEditSimulation();
            m_simulationEstLancer = true;
            playPauseSimulation.setText("Pause");
        }
        else if (m_crono.estEnPause()){
            m_crono.start();
            playPauseSimulation.setText("Pause");
        }
        else{
            m_crono.pause();
            playPauseSimulation.setText("Reprendre!");
        }
    }//GEN-LAST:event_playPauseSimulationActionPerformed

    private void avancerSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avancerSimulationActionPerformed
        m_crono.avancerX2();
    }//GEN-LAST:event_avancerSimulationActionPerformed

    private void ralentirSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ralentirSimulationActionPerformed
        m_crono.ralentirX2();
    }//GEN-LAST:event_ralentirSimulationActionPerformed

    private void comboBoxAutobusActionPerformed(java.awt.event.ActionEvent evt) {                                                

        /*int index = comboBoxAutobus.getSelectedIndex();
         String name =(String) comboBoxAutobus.getItemAt(index);
         m_controleur.deselectionnerTout();
         for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator() ;circuits.hasNext() ; ){
         Circuit circuit = circuits.next();
         for (ListIterator<Autobus> autobuss = circuit.getListeAutobus().listIterator() ;autobuss.hasNext() ; ){
         Autobus autobus = autobuss.next();
         if (autobus.getID().equals(name)){
         autobusachangerStatutSelection();
         break;
         }
         }
         this.afficheurReseau.repaint();
         */
    }                                               

    // private void comboBoxSourcesActionPerformed(java.awt.event.ActionEvent evt) {                                                
    //     this.setCommande(Commande.SELECTIONNER);
    //     int index = comboBoxSources.getSelectedIndex();
    //     String name = comboBoxSources.getItemAt(index);
    //     m_controleur.deselectionnerTout();
    //     for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
    //         Circuit circuit = circuits.next();
    //         for (ListIterator<SourceAutobus> sources = circuit.getListeSources().listIterator(); sources.hasNext();) {
    //             SourceAutobus source = sources.next();
    //             if (source.getNom().equals(name)) {
    //                 source.changerStatutSelection();
    //                 break;
    //             }
    //         }
    //     }
    //     this.afficheurReseau.repaint();
    // }                                               

    // private void comboBoxArretsActionPerformed(java.awt.event.ActionEvent evt) {                                               
    //     this.setCommande(Commande.SELECTIONNER);
    //     int index = comboBoxArrets.getSelectedIndex();
    //     String name = comboBoxArrets.getItemAt(index);
    //     m_controleur.deselectionnerTout();
    //     for (ListIterator<Arret> arrets = m_controleur.getTransport().getListeArrets().listIterator(); arrets.hasNext();) {
    //         Arret arret = arrets.next();
    //         if (arret.getNom().equals(name)) {
    //             arret.changerStatutSelection();
    //             break;
    //         }
    //     }
    //     this.afficheurReseau.repaint();
    // }                                              

    private void editerRoutierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editerRoutierActionPerformed
        
        editerRoutier.setSelected(false);  // fix temporaire
        editerElement();
    }//GEN-LAST:event_editerRoutierActionPerformed

    private void editerTransportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editerTransportActionPerformed
        
        editerTransport.setSelected(false);  // fix temporaire
        editerElement();
    }//GEN-LAST:event_editerTransportActionPerformed

    private void recommancerSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recommancerSimulationActionPerformed
        playPauseSimulation.setText("Lancer!");
        arreterSimulation.doClick();
        playPauseSimulation.doClick();
    }//GEN-LAST:event_recommancerSimulationActionPerformed

    private void arreterSimulation(){
        m_timer.stop();
        m_crono.pause();
        m_simulationEstLancer = false;
        m_controleur.arreterSimulation();
        miseAjourStatApresSimulation();
    }
    
    private void arreterSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arreterSimulationActionPerformed
        arreterSimulation();
        playPauseSimulation.setText("Lancer!");
        playPauseSimulation.setSelected(false);
        
        routier.setEnabled(true);
        transport.setEnabled(true);
        //besoins.setEnabled(true);
        
        recommancerSimulation.setEnabled(false);
        arreterSimulation.setEnabled(false);
        avancerSimulation.setEnabled(false);
        ralentirSimulation.setEnabled(false);
        
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_arreterSimulationActionPerformed

    private void checkBoxDijkstraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDijkstraActionPerformed
        m_controleur.changerStatutDijkstra();
    }//GEN-LAST:event_checkBoxDijkstraActionPerformed

    private void comboBoxIntersectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxIntersectionsActionPerformed
        this.setCommande(Commande.SELECTIONNER);
        int index = comboBoxIntersections.getSelectedIndex();
        String name = comboBoxIntersections.getItemAt(index);
        m_controleur.deselectionnerTout();
        for (ListIterator<Intersection> intersections = m_controleur.getRoutier().getIntersections().listIterator(); intersections.hasNext();) {
            Intersection intersection = intersections.next();
            if (intersection.getName().equals(name)) {
                m_controleur.getRoutier().getPileSelection().ajouter(intersection);
                afficherPanelRoutier(intersection);
                break;
            }
        }
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_comboBoxIntersectionsActionPerformed

    private void comboBoxTronconsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTronconsActionPerformed
        this.setCommande(Commande.SELECTIONNER);
        int index = comboBoxTroncons.getSelectedIndex();
        String name = comboBoxTroncons.getItemAt(index);
        m_controleur.deselectionnerTout();
        for (ListIterator<Intersection> intersections = m_controleur.getRoutier().getIntersections().listIterator(); intersections.hasNext();) {
            Intersection intersection = intersections.next();
            for (ListIterator<Troncon> troncons = intersection.getTroncons().listIterator(); troncons.hasNext();) {
                Troncon troncon = troncons.next();
                if (troncon.getNom().equals(name)) {
                    m_controleur.getRoutier().getPileSelection().ajouter(troncon);
                    afficherPanelRoutier(troncon);
                    break;
                }
            }
            this.afficheurReseau.repaint();
        }
    }//GEN-LAST:event_comboBoxTronconsActionPerformed

    private void comboBoxCircuitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCircuitsActionPerformed
        this.setCommande(Commande.SELECTIONNER);
        int index = comboBoxCircuits.getSelectedIndex();
        String name = comboBoxCircuits.getItemAt(index);
        m_controleur.deselectionnerTout();
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            if (circuit.getNom().equals(name)) {
                for (PaireArretTrajet ArretTrajet : circuit.getListeArretTrajet()) {
                    ElementTransport arret = ArretTrajet.getArret();
                    m_controleur.getTransport().getPileSelection().ajouter(arret);
                }
                m_controleur.getTransport().getPileSelection().ajouter(circuit);
                afficherPanelTransport(circuit);
                break;
            }
        }
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_comboBoxCircuitsActionPerformed

    private void comboBoxSourcesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSourcesActionPerformed
        this.setCommande(Commande.SELECTIONNER);
        int index = comboBoxSources.getSelectedIndex();
        String name = comboBoxSources.getItemAt(index);
        m_controleur.deselectionnerTout();
        for (ListIterator<Circuit> circuits = m_controleur.getTransport().getListeCircuits().listIterator(); circuits.hasNext();) {
            Circuit circuit = circuits.next();
            for (ListIterator<SourceAutobus> sources = circuit.getListeSources().listIterator(); sources.hasNext();) {
                SourceAutobus source = sources.next();
                if (source.getNom().equals(name)) {
                    m_controleur.getTransport().getPileSelection().ajouter(source);
                    afficherPanelTransport(source);
                    break;
                }
            }
        }
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_comboBoxSourcesActionPerformed

    private void comboBoxArretsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxArretsActionPerformed
        this.setCommande(Commande.SELECTIONNER);
        int index = comboBoxArrets.getSelectedIndex();
        String name = comboBoxArrets.getItemAt(index);
        m_controleur.deselectionnerTout();
        for (ListIterator<Arret> arrets = m_controleur.getTransport().getListeArrets().listIterator(); arrets.hasNext();) {
            Arret arret = arrets.next();
            if (arret.getNom().equals(name)) {
                m_controleur.getTransport().getPileSelection().ajouter(arret);
                afficherPanelTransport(arret);
                break;
            }
        }
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_comboBoxArretsActionPerformed

    private void comboBoxPietonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPietonsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxPietonsActionPerformed

    private void selectionBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionBesoinsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectionBesoinsActionPerformed

    private void ajoutBesoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutBesoinActionPerformed
        //
        //
        this.setCommande(Commande.BESOIN);
        this.afficheurReseau.repaint();
    }//GEN-LAST:event_ajoutBesoinActionPerformed

    private void suppressionBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppressionBesoinsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suppressionBesoinsActionPerformed

    private void editerBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editerBesoinsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editerBesoinsActionPerformed

    private void checkBoxDijkstraBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxDijkstraBesoinsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxDijkstraBesoinsActionPerformed

    private void comboBoxBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxBesoinsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxBesoinsActionPerformed

    private void comboBoxStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxStatActionPerformed
       statistiques();
    }//GEN-LAST:event_comboBoxStatActionPerformed


    /**
     * @param args the command line arguments
     */
    private void changeLookAndFeel() {
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("javax.swing.plaf.nimbus.NimbusLookAndFeel".equals(info.getClassName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
        */
        try {
            // select Look and Feel
              javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    public void setMode(Mode p_mode) {
        this.m_mode_courant = p_mode;
        boutonsRoutier.setVisible(false);
        boutonsSelectionRoutier.setVisible(false);
        boutonsTransport.setVisible(false);
        boutonsBesoins.setVisible(false);
        boutonsSelectionTransport.setVisible(false);
        boutonsSimulation.setVisible(false);
        boutonsSelectionSimulation.setVisible(false);
        boutonsSelectionBesoins.setVisible(false);
        m_controleur.deselectionnerTout();
        disparaitrePanels();
        this.afficheurReseau.repaint();
    }

    public void setCommande(Commande p_commande) {
        this.m_commande_courante = p_commande;
    }

    public javax.swing.JScrollPane getDefilementAfficheur() {
        return defilementAfficheur;
    }

    public void miseAJourPermissionsBoutons() {
        if (m_controleur.getHistorique().peutAnnuler())
            annuler.setEnabled(true);
        else
            annuler.setEnabled(false);
        
        if (m_controleur.getHistorique().peutRetablir())
            retablir.setEnabled(true);
        else
            retablir.setEnabled(false);
        
        
        switch (m_mode_courant) {
            case ROUTIER:

                if (comboBoxIntersections.getItemCount() > 2) {
                    selectionRoutier.setEnabled(true);
                    suppressionRoutier.setEnabled(true);
                } else if (comboBoxIntersections.getItemCount() > 1) {
                    selectionRoutier.setEnabled(true);
                    suppressionRoutier.setEnabled(true);
                } else {
                    selectionRoutier.setEnabled(false);
                    suppressionRoutier.setEnabled(false);
                    constructionTroncon.doClick();
                }

                if (comboBoxTroncons.getItemCount() > 1) {
                    transport.setEnabled(true);
                } else {
                    transport.setEnabled(false);
                }

                break;

            case TRANSPORT:
                if (comboBoxArrets.getItemCount() > 2) {
                    selectionTransport.setEnabled(true);
                    suppressionTransport.setEnabled(true);
                } else if (comboBoxArrets.getItemCount() > 1) {
                    selectionTransport.setEnabled(true);
                    suppressionTransport.setEnabled(true);
                } else {
                    selectionTransport.setEnabled(false);
                    suppressionTransport.setEnabled(false);
                    ajoutCircuit.doClick();
                }

                if (comboBoxSources.getItemCount() > 1) {
                    simulation.setEnabled(true);
                } else {
                    simulation.setEnabled(false);
                }

                break;

            default:
                break;

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GUI.AfficheurReseau afficheurReseau;
    private javax.swing.JToggleButton ajoutArret;
    private javax.swing.JToggleButton ajoutBesoin;
    private javax.swing.JToggleButton ajoutCircuit;
    private javax.swing.JToggleButton ajoutIntersection;
    private javax.swing.JButton annuler;
    private javax.swing.JButton arreterSimulation;
    private javax.swing.JButton avancerSimulation;
    private javax.swing.JToggleButton besoins;
    private javax.swing.JPanel boutonModes;
    private javax.swing.JPanel boutonsBesoins;
    private javax.swing.JPanel boutonsRoutier;
    private javax.swing.JPanel boutonsSelectionBesoins;
    private javax.swing.JPanel boutonsSelectionRoutier;
    private javax.swing.JPanel boutonsSelectionSimulation;
    private javax.swing.JPanel boutonsSelectionTransport;
    private javax.swing.JPanel boutonsSimulation;
    private javax.swing.JPanel boutonsTransport;
    private javax.swing.JCheckBox checkBoxDijkstra;
    private javax.swing.JCheckBox checkBoxDijkstraBesoins;
    private javax.swing.JComboBox<String> comboBoxArrets;
    private javax.swing.JComboBox<String> comboBoxAutobus;
    private javax.swing.JComboBox<String> comboBoxBesoins;
    private javax.swing.JComboBox<String> comboBoxCircuits;
    private javax.swing.JComboBox<String> comboBoxIntersections;
    private javax.swing.JComboBox comboBoxPietons;
    private javax.swing.JComboBox<String> comboBoxSources;
    private javax.swing.JComboBox<String> comboBoxStat;
    private javax.swing.JComboBox<String> comboBoxTroncons;
    private javax.swing.JToggleButton constructionTroncon;
    private javax.swing.JLabel coordonnees;
    private javax.swing.JScrollPane defilementAfficheur;
    private javax.swing.JToggleButton editerBesoins;
    private javax.swing.JMenuItem editerClicDroit;
    private javax.swing.JToggleButton editerRoutier;
    private javax.swing.JToggleButton editerTransport;
    private javax.swing.JLabel facteurMultiplicatif;
    private javax.swing.JMenu fichier;
    private javax.swing.ButtonGroup groupeModes;
    private javax.swing.ButtonGroup groupeRoutier;
    private javax.swing.ButtonGroup groupeTransport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menu;
    private GUI.PanelArret panelArret1;
    private GUI.PanelCircuit panelCircuit1;
    private GUI.PanelIntersection panelIntersection1;
    private GUI.PanelSourceAutobus panelSourceAutobus1;
    private GUI.PanelTroncon panelTroncon1;
    private javax.swing.JPanel panneauCommandes;
    private javax.swing.JPanel panneauModes;
    private javax.swing.JToggleButton playPauseSimulation;
    private javax.swing.JMenuItem quitter;
    private javax.swing.JButton ralentirSimulation;
    private javax.swing.JButton recommancerSimulation;
    private javax.swing.JButton retablir;
    private javax.swing.JToggleButton routier;
    private javax.swing.JToggleButton selectionBesoins;
    private javax.swing.JToggleButton selectionRoutier;
    private javax.swing.JToggleButton selectionTransport;
    private javax.swing.JToggleButton simulation;
    private javax.swing.JButton suppressionBesoins;
    private javax.swing.JButton suppressionRoutier;
    private javax.swing.JButton suppressionTransport;
    private javax.swing.JMenuItem supprimerClicDroit;
    private javax.swing.JLabel time;
    private javax.swing.JToggleButton transport;
    private javax.swing.JLabel zoom;
    private javax.swing.JLabel zoomTitre;
    // End of variables declaration//GEN-END:variables
}
